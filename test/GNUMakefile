LIB_PATHS =  \
-LC:/MinGW32/lib/gcc/mingw32/4.6.1 \
-LC:/MinGW32/lib \

# The linker options.
LIBS = \
-lopengl32 \

# The pre-processor options used by the cpp (man cpp for more).
CPPFLAGS = -Wall -mwindows

# The options used in linking as well as in any direct use of ld.
LDFLAGS =

# The directories which should be added to the include path
INCDIRS = \
-IC:/MinGW32/lib/gcc/mingw32/4.6.1/include/c++ \
-IC:/MinGW32/lib/gcc/mingw32/4.6.1/include/c++/mingw32 \
-IC:/MinGW32/include \
-Iinclude \

# The executable file name.
# If not specified, current directory name or `a.out' will be used.
TARGET = test

## Implicit Section: change the following only when necessary.
##==========================================================================

# The source file types (headers excluded).
SRCEXTS = .cpp

# The header file types.
HDREXTS = .h .hpp

# The pre-processor and compiler options.
CPPFLAGS += -g -O2

# The C++ program compiler.
COMPILER = g++

# The C++ program linker.
LINKER = g++

# The command used to delete file.
RM     = rm -f

BUILDDIR   = build
SRCDIR     = src
INCLUDEDIR = include

## Stable Section: usually no need to be changed. But you can add more.
##==========================================================================
EXEC_SUFFIX = .exe
SHARED_SUFFIX = .so
STATIC_SUFFIX = .a
LIB_PREFIX = lib
TARGET = default

SOURCES = $(wildcard $(addprefix $(SRCDIR)/*,$(SRCEXTS)))
HEADERS = $(wildcard $(addprefix $(INCLUDEDIR)/*,$(HDREXTS)))
SRCS    = $(filter-out %.c,$(SOURCES))
OBJS    = $(foreach s,$(SOURCES),$(addsuffix .o, $(BUILDDIR)/$(notdir $(basename $(s)))))
DEPS    = $(OBJS:.o=.d)

## Define some useful variables.
COMPILE = $(COMPILER) $(INCDIRS) $(CPPFLAGS) -c
LINK    = $(LINKER) $(CPPFLAGS) $(LDFLAGS)
SHAREDLINK = $(LINKER) $(CPPFLAGS) $(LDFLAGS) -shared

.PHONY: all objs clean distclean help show

# Delete the default suffixes
.SUFFIXES:

all: $(TARGET)$(EXEC_SUFFIX)

# Rules for creating dependency files (.d).
#------------------------------------------

deps:$(DEPS)

$(BUILDDIR)/%.d:$(SRCDIR)/%.cpp
	$(COMPILER) $(INCDIRS) -MF$@ -MD -MM -MT$@ -MT$(BUILDDIR)/$(basename $(notdir $<)).o -c $<

# Rules for generating object files (.o).
#----------------------------------------
objs:$(OBJS)

$(BUILDDIR)/%.o:$(SRCDIR)/%.cpp
	$(COMPILE) $< -o $@

# Rules for generating the executable.
#-------------------------------------
$(TARGET)$(EXEC_SUFFIX):$(OBJS)
	$(LINK) $(OBJS) $(LIB_PATHS) $(LIBS) -o $@
	@echo Type ./$@ to execute the program.

clean:
	$(RM) $(OBJS) $(TARGET)$(EXEC_SUFFIX)

distclean: clean
	$(RM) $(DEPS)
	
staticlib: $(OBJS)
	$(STATICLINK) -o $(LIB_PREFIX)$(TARGET)$(STATIC_SUFFIX)
	
sharedlib: $(OBJS)
	$(SHAREDLINK) -o $(LIB_PREFIX)$(TARGET)$(SHARED_SUFFIX)
	
sinclude $(DEPS)

# Show help.
help:
	@echo
	@echo 'Usage: make [TARGET]'
	@echo 'TARGETS:'
	@echo '  all       (=make) compile and link.'
	@echo '  objs      compile only (no linking).'
	@echo '  clean     clean objects and the executable file.'
	@echo '  distclean clean objects, the executable and dependencies.'
	@echo '  show      show variables (for debug use only).'
	@echo '  help      print this message.'
	@echo
	@echo 'Report bugs to <whyglinux AT gmail DOT com>.'

# Show variables (for debug use only.)
show:
	@echo 'PROGRAM     :' $(TARGET)$(EXEC_SUFFIX)
	@echo 'SHARED_LIB  :' $(LIB_PREFIX)$(TARGET)$(SHARED_SUFFIX)
	@echo 'STATIC_LIB  :' $(LIB_PREFIX)$(TARGET)$(STATIC_SUFFIX)
	@echo 'SRCDIR      :' $(SRCDIR)
	@echo 'HEADERS     :' $(HEADERS)
	@echo 'SOURCES     :' $(SOURCES)
	@echo 'LIBS        :' $(LIBS)
	@echo 'LIB_PATHS   :' $(LIB_PATHS)
	@echo 'SRCS        :' $(SRCS)
	@echo 'OBJS        :' $(OBJS)
	@echo 'DEPS        :' $(DEPS)
	@echo 'COMPILE     :' $(COMPILE)
	@echo 'LINK        :' $(LINK)

## End of the Makefile